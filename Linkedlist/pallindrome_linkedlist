  ListNode* reverse(ListNode* head){
        ListNode* curr=head;
        ListNode* prev=NULL;
        while(curr!=NULL){
            ListNode* next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        int c=0;
        ListNode* temp=head;
        while(temp!=NULL){
            c++;
            temp=temp->next;
        }
        ListNode* prev=NULL;
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast!=NULL&& fast->next!=NULL){
              prev=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        if(prev==NULL)return true;
        if(c%2==0)prev->next=reverse(slow);
        else slow->next=reverse(slow->next);
        if(c%2==0){
            temp=head;
            ListNode* temp1=prev->next;
            while(temp!=prev->next){
                if(temp1==NULL||temp1->val!=temp->val)return false;
                temp1=temp1->next;
                temp=temp->next;
            }
        }
        else{
            temp=head;
            ListNode* temp2=slow->next;
            while(temp!=slow){
                if(temp2==NULL||temp->val!=temp2->val)return false;
                temp=temp->next;
                temp2=temp2->next;
            }
        }
        return true;
    }